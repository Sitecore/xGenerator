resources:
    - repo: self
      clean: true

variables:
    SITECORE_VERSION: "10.1.0"
    SITECORE_SHORT_VERSION: "10.1"

stages:
    - stage: Build_xGenerator
      displayName: "Build xGenerator"
      jobs:
          - job: Build_xGenerator_Job
            strategy:
                matrix:
                    windows2004:
                        poolName: "docker-2004-agents"
                        osVersion: "2004"
                        nanoserverVersion: "2004"
                    ltsc2019:
                        poolName: "docker-ltsc2019-agents"
                        osVersion: "ltsc2019"
                        nanoserverVersion: "1809"
                    20H2:
                        poolName: "docker-20H2-agents"
                        osVersion: "20H2"
                        nanoserverVersion: "20H2"
            pool:
                name: $(poolName)
            workspace:
                clean: all
            steps:
                - task: PowerShell@2
                  displayName: "Build xGenerator Image"
                  inputs:
                      targetType: "inline"
                      script: |
                          $sitecoreVersion = "$(SITECORE_VERSION)"

                          az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                          az acr login -n $(container.registry.short)

                          $params = @{}
                          $params.Add("IsolationMode","process")
                          $params.Add("Registry","$(REGISTRY)")
                          $params.Add("WindowsVersion","$(osVersion)")
                          $params.Add("SitecoreVersion","$sitecoreVersion")

                          ./init-ci.ps1 @params

                          $env:INTERNAL_NUGET_SOURCE_USERNAME="$(INTERNAL_NUGET_SOURCE_USERNAME)"
                          $env:INTERNAL_NUGET_SOURCE="$(INTERNAL_NUGET_SOURCE)"
                          $env:INTERNAL_NUGET_SOURCE_PASSWORD="$(INTERNAL_NUGET_SOURCE_PASSWORD)"

                          docker-compose build
                          docker-compose push
    - stage: Build_Linux_Images
      dependsOn: [Build_xGenerator]
      jobs:
          - job: Publish_Asset_Images
            displayName: "Download and Extract Asset Images"
            pool:
                name: "docker-20H2-agents"
            steps:
                - powershell: |
                      az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                      az acr login -n $(container.registry.short)

                      Install-Module powershell-yaml -Force
                      Import-Module powershell-yaml
                      $config = docker-compose config | ConvertFrom-Yaml
                      $image = $config.services.xGenerator.image

                      docker pull $image
                      docker container create --name tempWindows $image
                      if ($LASTEXITCODE -ne 0)
                      {
                          throw "Failed to create container"
                      }
                      docker container cp tempWindows:/module $(Build.ArtifactStagingDirectory)
                      docker container rm -f tempWindows

                  displayName: "Download Windows Assets"
                - publish: $(Build.ArtifactStagingDirectory)
                  displayName: "Publish Artifacts"
                  artifact: "assets"
          - job: Build_Linux_Images
            dependsOn: [Publish_Asset_Images]
            timeoutInMinutes: 720
            displayName: "Build Linux Images"
            condition:  succeeded('Publish_Asset_Images')
            pool:
                name: "docker-linux-agents"
            steps:
                - checkout: self
                  clean: true
                - task: DownloadPipelineArtifact@2
                  inputs:
                      path: "$(Build.SourcesDirectory)"
                - task: Bash@3
                  displayName: "Move assets to build folder"
                  inputs:
                      targetType: "inline"
                      script: |
                          sudo rsync -a $(Build.SourcesDirectory)/assets/* $(Build.SourcesDirectory)/docker/data/
                          sudo chown AzDevOps:AzDevOps $(Build.SourcesDirectory)/docker/data/ -R
                - powershell: |
                    az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                    az acr login -n $(container.registry.short)

                    $params = @{}
                      $params.Add("IsolationMode","default")
                      $params.Add("Registry","$(REGISTRY)")

                      ./init-ci.ps1 @params

                      $env:INTERNAL_NUGET_SOURCE_USERNAME="$(INTERNAL_NUGET_SOURCE_USERNAME)"
                      $env:INTERNAL_NUGET_SOURCE="$(INTERNAL_NUGET_SOURCE)"
                      $env:INTERNAL_NUGET_SOURCE_PASSWORD="$(INTERNAL_NUGET_SOURCE_PASSWORD)"

                      docker-compose -f docker-compose.linux.yml build
                      docker-compose -f docker-compose.linux.yml push
                      $env:SITECORE_VERSION = "$(SITECORE_SHORT_VERSION)"
                      docker-compose -f docker-compose.linux.yml build
                      docker-compose -f docker-compose.linux.yml push
                  displayName: "Build Linux Images"
    - stage: Trigger_Harbor_Push
      displayName: "Trigger Harbor Push"
      dependsOn:
        - Build_xGenerator
        - Build_Linux_Images
      condition: and(succeeded('Build_xGenerator'), succeeded('Build_Linux_Images'),or( eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
      jobs:
        - job: Harbor_Push
          displayName: "Harbor Push"
          steps:
            - task: TriggerBuild@3
              displayName: "Trigger Harbor Push"
              inputs:
                definitionIsInCurrentTeamProject: true
                buildDefinition: "103"
                queueBuildForUserThatTriggeredBuild: true
                ignoreSslCertificateErrors: false
                useSameSourceVersion: false
                useCustomSourceVersion: false
                useSameBranch: false
                branchToUse: "main"
                waitForQueuedBuildsToFinish: false
                storeInEnvironmentVariable: false
                buildParameters: "namespace: community, groupName: communityModules, tag: ''"
                authenticationMethod: "Personal Access Token"
                password: "$(System.AccessToken)"
                enableBuildInQueueCondition: false
                dependentOnSuccessfulBuildCondition: false
                dependentOnFailedBuildCondition: false
                checkbuildsoncurrentbranch: false
                failTaskIfConditionsAreNotFulfilled: false
